decl @getint(): i32

decl @getch(): i32

decl @getarray(*i32): i32

decl @putint(i32)

decl @putch(i32)

decl @putarray(i32, *i32)

decl @starttime()

decl @stoptime()

fun @init(@arr: *[[i32, 10], 10]) {
%init_0:
  %arr = alloc *[[i32, 10], 10]
  store @arr, %arr
  @i = alloc i32
  store 0, @i
  jump %init_1

%init_1:
  %0 = load @i
  %1 = lt %0, 10
  br %1, %init_2, %init_3

%init_2:
  @j = alloc i32
  store 0, @j
  jump %init_4

%init_3:
  ret

%init_4:
  %2 = load @j
  %3 = lt %2, 10
  br %3, %init_5, %init_6

%init_5:
  @k = alloc i32
  store 0, @k
  jump %init_7

%init_6:
  %4 = load @i
  %5 = add %4, 1
  store %5, @i
  jump %init_1

%init_7:
  %6 = load @k
  %7 = lt %6, 10
  br %7, %init_8, %init_9

%init_8:
  %8 = load @i
  %9 = load %arr
  %10 = getptr %9, %8
  %11 = load @j
  %12 = getelemptr %10, %11
  %13 = load @k
  %14 = getelemptr %12, %13
  %15 = load @i
  %16 = mul %15, 100
  %17 = load @j
  %18 = mul %17, 10
  %19 = add %16, %18
  %20 = load @k
  %21 = add %19, %20
  store %21, %14
  %22 = load @k
  %23 = add %22, 1
  store %23, @k
  jump %init_7

%init_9:
  %24 = load @j
  %25 = add %24, 1
  store %25, @j
  jump %init_4
}

fun @f2(@a0: *[i32, 10], @a1: *i32, @a2: i32, @a3: *i32, @a4: *i32, @a5: *[[i32, 10], 10], @a6: *i32, @a7: *i32, @a8: i32, @a9: *[i32, 10]): i32 {
%f2_0:
  %a0 = alloc *[i32, 10]
  store @a0, %a0
  %a1 = alloc *i32
  store @a1, %a1
  %a2 = alloc i32
  store @a2, %a2
  %a3 = alloc *i32
  store @a3, %a3
  %a4 = alloc *i32
  store @a4, %a4
  %a5 = alloc *[[i32, 10], 10]
  store @a5, %a5
  %a6 = alloc *i32
  store @a6, %a6
  %a7 = alloc *i32
  store @a7, %a7
  %a8 = alloc i32
  store @a8, %a8
  %a9 = alloc *[i32, 10]
  store @a9, %a9
  %26 = load %a0
  %27 = getptr %26, 0
  %28 = getelemptr %27, 9
  %29 = load %28
  %30 = load %a1
  %31 = getptr %30, 1
  %32 = load %31
  %33 = add %29, %32
  %34 = load %a2
  %35 = add %33, %34
  %36 = load %a3
  %37 = getptr %36, 3
  %38 = load %37
  %39 = add %35, %38
  %40 = load %a4
  %41 = getptr %40, 4
  %42 = load %41
  %43 = add %39, %42
  %44 = load %a5
  %45 = getptr %44, 5
  %46 = getelemptr %45, 5
  %47 = getelemptr %46, 5
  %48 = load %47
  %49 = add %43, %48
  %50 = load %a6
  %51 = getptr %50, 6
  %52 = load %51
  %53 = add %49, %52
  %54 = load %a7
  %55 = getptr %54, 7
  %56 = load %55
  %57 = add %53, %56
  %58 = load %a8
  %59 = add %57, %58
  %60 = load %a9
  %61 = getptr %60, 9
  %62 = getelemptr %61, 8
  %63 = load %62
  %64 = add %59, %63
  ret %64
}

fun @main(): i32 {
%main_0:
  @arr = alloc [[[i32, 10], 10], 10]
  @sum = alloc i32
  store 0, @sum
  %65 = getelemptr @arr, 0
  call @init(%65)
  %66 = load @sum
  %67 = getelemptr @arr, 0
  %68 = getelemptr %67, 0
  %69 = getelemptr @arr, 1
  %70 = getelemptr %69, 1
  %71 = getelemptr %70, 0
  %72 = getelemptr @arr, 2
  %73 = getelemptr %72, 2
  %74 = getelemptr %73, 2
  %75 = load %74
  %76 = getelemptr @arr, 3
  %77 = getelemptr %76, 3
  %78 = getelemptr %77, 0
  %79 = getelemptr @arr, 4
  %80 = getelemptr %79, 4
  %81 = getelemptr %80, 0
  %82 = getelemptr @arr, 0
  %83 = getelemptr @arr, 6
  %84 = getelemptr %83, 6
  %85 = getelemptr %84, 0
  %86 = getelemptr @arr, 7
  %87 = getelemptr %86, 7
  %88 = getelemptr %87, 0
  %89 = getelemptr @arr, 8
  %90 = getelemptr %89, 8
  %91 = getelemptr %90, 8
  %92 = load %91
  %93 = getelemptr @arr, 9
  %94 = getelemptr %93, 0
  %95 = call @f2(%68, %71, %75, %78, %81, %82, %85, %88, %92, %94)
  %96 = add %66, %95
  store %96, @sum
  %97 = load @sum
  call @putint(%97)
  ret 0
}
