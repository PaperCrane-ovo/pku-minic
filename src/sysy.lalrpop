// lalrpop 里的约定
grammar;

use crate::ast::*;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  // 块注释
  r"/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/" => {},
  // 剩下的情况采用默认方式处理
  _
}

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef { <> }
  }
}

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <stmt: Stmt> "}" => Block { <> };

Stmt: Stmt = {
    "return" <exp: Exp> ";" => Stmt::Return(Return{<>}),
};

Exp: Exp = <lor_exp:LOrExp> => <>;

PrimaryExp: Exp = {
    "(" <exp: Exp> ")" => <>,
    <num:Number> => Exp::Number(<>),
}


UnaryExp: Exp = {
    <primary_exp: PrimaryExp> => <>,
    <unary_op: UnaryOp> <unary_exp:UnaryExp> => Exp::UnaryExp{op:unary_op, exp:Box::new(unary_exp)},
    
}

UnaryOp: MyUnaryOp = {
    "-" => MyUnaryOp::Neg,
    "!" => MyUnaryOp::Not,
    "+" => MyUnaryOp::Pos,
}

MulExp: Exp = {
    <unary_exp: UnaryExp> => <>,
    <mul_exp: MulExp> <mul_op:MulOp> <unary_exp: UnaryExp> => Exp::BinaryExp{op:mul_op, exp1:Box::new(mul_exp), exp2:Box::new(unary_exp)},
}

MulOp: MyBinaryOp = {
    "*" => MyBinaryOp::Mul,
    "/" => MyBinaryOp::Div,
    "%" => MyBinaryOp::Mod,
}

AddExp: Exp = {
    <mul_exp: MulExp> => <>,
    <add_exp: AddExp> <add_op:AddOp> <mul_exp: MulExp> => Exp::BinaryExp{op:add_op, exp1:Box::new(add_exp), exp2:Box::new(mul_exp)},
}

AddOp: MyBinaryOp = {
    "+" => MyBinaryOp::Add,
    "-" => MyBinaryOp::Sub,
}

RelExp: Exp = {
    <add_exp: AddExp> => <>,
    <rel_exp: RelExp> <rel_op:RelOp> <add_exp: AddExp> => Exp::BinaryExp{op:rel_op, exp1:Box::new(rel_exp), exp2:Box::new(add_exp)},
}

RelOp: MyBinaryOp = {
    "<" => MyBinaryOp::Lt,
    "<=" => MyBinaryOp::Le,
    ">" => MyBinaryOp::Gt,
    ">=" => MyBinaryOp::Ge,
}

EqExp: Exp = {
    <rel_exp: RelExp> => <>,
    <eq_exp: EqExp> <eq_op:EqOp> <rel_exp: RelExp> => Exp::BinaryExp{op:eq_op, exp1:Box::new(eq_exp), exp2:Box::new(rel_exp)},
}

EqOp: MyBinaryOp = {
    "==" => MyBinaryOp::Eq,
    "!=" => MyBinaryOp::Ne,
}

LAndExp: Exp = {
    <eq_exp: EqExp> => <>,
    <land_exp: LAndExp> "&&" <eq_exp: EqExp> => Exp::BinaryExp{op: MyBinaryOp::LAnd, exp1:Box::new(land_exp), exp2:Box::new(eq_exp)},
}

LOrExp: Exp = {
    <land_exp: LAndExp> => <>,
    <lor_exp: LOrExp> "||" <land_exp: LAndExp> => Exp::BinaryExp{op: MyBinaryOp::LOr, exp1:Box::new(lor_exp), exp2:Box::new(land_exp)},
}

Number: i32 = <num: IntConst> => <>;



// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
// 关于尖括号到底代表什么, 请 RTFM
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}
